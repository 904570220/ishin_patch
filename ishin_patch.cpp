#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>

#include "ishin_sav_edit.h"
#include "ishin_patch.h"

const uint8_t dlc_trooper[][46] = {
    {   //传说队士“春日 一之丞”
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8C, 0x01, 0x00, 0x00, 0xC6, 0x00, 0x00, 0x00, 
        0xF0, 0xEF, 0x18, 0x00, 0x84, 0xDE, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64
    },
    {   //传说队士“西谷 清誉”
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8F, 0x01, 0x00, 0x00, 0xBB, 0x00, 0x00, 0x00, 
        0xB2, 0xD3, 0x16, 0x00, 0x28, 0x9A, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52
    },
    {   //传说队士“向田 佐江”
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0xC6, 0x00, 0x00, 0x00, 
        0x44, 0xDE, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06
    },
    {   //传说队士“牧村 真子”
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0xC6, 0x00, 0x00, 0x00, 
        0x44, 0xDE, 0x18, 0x00, 0xE0, 0x22, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47
    },
    {   //传说队士“虎之助”
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0xBE, 0x00, 0x00, 0x00, 
        0x6A, 0x5C, 0x17, 0x00, 0x9E, 0x33, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28
    },
    {   //传说队士“山杀”
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x01, 0x00, 0x00, 0xC6, 0x00, 0x00, 0x00, 
        0x44, 0xDE, 0x18, 0x00, 0xA2, 0x5C, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64
    },
    {   //传说队士“咕小春”
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 
        0x61, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A
    },
    {   //传说队士“豆藏”
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0xC6, 0x00, 0x00, 0x00, 
        0x44, 0xDE, 0x18, 0x00, 0xCC, 0x55, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40
    },
};

const uint8_t instructor_trooper[][46] = {
    {   //攻击师父
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    },
    {   //守备师父
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06
    },
    {   //医护师父
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7A, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06
    },
    {   //支援师父
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7C, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06
    },
    {   //声援师父
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7B, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
        0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06
    },
};

//查找是否有ID是否重复
static int trooper_check_exist(struct type_ishin_trooper *p_trooper, int max_trooper_num, uint16_t trooper_id)
{
    uint16_t id;
    int i;

    for(i=0; i<max_trooper_num; i++) {
        //0就是结束
        if(p_trooper[i].num == 0) {
            break;
        }
        //找到说明存在，不需要继续
        id = p_trooper[i].data[6] |
            (p_trooper[i].data[7] << 8);
        if(id == trooper_id) {
            return 1;
        }
    }
    
    return 0;
}

int ishin_patch(struct type_ishin_json *json)
{
    size_t sz;
    uint8_t *data;
    struct type_ishin_trooper *p_trooper, *p_trooper_start;
    size_t max_trooper = 500;
    int i, dlc_trooper_num, total_dlc_trooper_num;
    uint16_t trooper_id;
    uint16_t *p_total_tropper;
    
    total_dlc_trooper_num = sizeof(dlc_trooper)/sizeof(dlc_trooper[0]);
    dlc_trooper_num = 0;
    sz   = json->size;
    data = json->data;

    //偏移地址：0x23908
    p_total_tropper = (uint16_t *)(data + 0x23908);

    //偏移地址：0x23918
    p_trooper_start = p_trooper = (struct type_ishin_trooper *)(data + 0x23918);

    //找到空的地方
    i = 0;
    while(p_trooper->num != 0) {
        p_trooper++;
        i++;
        if(i == max_trooper) {
            printf("err: no trooper space\n");
            return 0;
        }
    }

    //插入新的队士，编号从一开始的总队士数开始
    for(i=0; i<total_dlc_trooper_num; i++) {
        //只有原本就没有的时候，才会添加
        trooper_id = dlc_trooper[i][6] | (dlc_trooper[i][7] << 8);
        if(trooper_check_exist(p_trooper_start, max_trooper, trooper_id) == 0) {
            (*p_total_tropper)++;
            p_trooper->num = *p_total_tropper;
            memcpy(p_trooper->data, dlc_trooper[i], sizeof(dlc_trooper[0]));
            p_trooper++;
            //满了，就直接退出
            if(p_trooper == p_trooper_start + max_trooper) {
                return 1;
            }
        }
    }

    return 1;
}

//添加师父卡片，一次每个5张
int ishin_patch_instructor(struct type_ishin_json *json)
{
    size_t sz;
    uint8_t *data;
    struct type_ishin_trooper *p_trooper, *p_trooper_start;
    size_t max_trooper = 500;
    int time = 5;
    int i, j, total_trooper_num;
    uint16_t *p_total_tropper;

    sz   = json->size;
    data = json->data;

    total_trooper_num = sizeof(instructor_trooper)/sizeof(instructor_trooper[0]);
    
    //偏移地址：0x23908
    p_total_tropper = (uint16_t *)(data + 0x23908);

    //偏移地址：0x23918
    p_trooper_start = p_trooper = (struct type_ishin_trooper *)(data + 0x23918);

    //找到空的地方
    i = 0;
    while(p_trooper->num != 0) {
        p_trooper++;
        i++;
        if(i == max_trooper) {
            printf("err: no trooper space\n");
            return 0;
        }
    }

    //插入新的队士，编号从一开始的总队士数开始
    for(i=0; i<total_trooper_num; i++) {
        for(j=0; j<time; j++) {
            (*p_total_tropper)++;
            p_trooper->num = *p_total_tropper;
            memcpy(p_trooper->data, instructor_trooper[i], sizeof(instructor_trooper[0]));
            p_trooper++;
            //满了，就直接退出
            if(p_trooper == p_trooper_start + max_trooper) {
                return 1;
            }
        }
    }

    return 1;
}
